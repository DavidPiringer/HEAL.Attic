// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PersistenceMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HEAL.Attic {

  /// <summary>Holder for reflection information generated from PersistenceMessages.proto</summary>
  public static partial class PersistenceMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for PersistenceMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PersistenceMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlQZXJzaXN0ZW5jZU1lc3NhZ2VzLnByb3RvEgtIRUFMLkZvc3NpbCJ+CgZC",
            "dW5kbGUSGQoRdHJhbnNmb3JtZXJfZ3VpZHMYASADKAwSEgoKdHlwZV9ndWlk",
            "cxgCIAMoDBITCgtyb290X2JveF9pZBgKIAEoDRIfCgVib3hlcxgUIAMoCzIQ",
            "LkhFQUwuRm9zc2lsLkJveBIPCgdzdHJpbmdzGB4gAygJIsoDCgNCb3gSFgoO",
            "dHJhbnNmb3JtZXJfaWQYASABKA0SEwoLdHlwZV9ib3hfaWQYAiABKA0SDwoH",
            "dHlwZV9pZBgKIAEoDRIcChRnZW5lcmljX3R5cGVfYm94X2lkcxgLIAMoDRIM",
            "CgRib29sGBQgASgIEgsKA2ludBgVIAEoBRIMCgRsb25nGBYgASgDEg0KBXVf",
            "aW50GBcgASgNEg4KBnVfbG9uZxgYIAEoBBINCgVmbG9hdBgZIAEoAhIOCgZk",
            "b3VibGUYGiABKAESDQoFYnl0ZXMYGyABKAwSDQoFYm9vbHMYHiADKAgSDAoE",
            "aW50cxgfIAMoBRINCgVsb25ncxggIAMoAxIOCgZ1X2ludHMYISADKA0SDwoH",
            "dV9sb25ncxgiIAMoBBIOCgZmbG9hdHMYIyADKAISDwoHZG91YmxlcxgkIAMo",
            "ARI1Cg9rZXlfdmFsdWVfcGFpcnMYKCADKAsyHC5IRUFMLkZvc3NpbC5LZXlW",
            "YWx1ZVBhaXJCb3gSEwoLY29tcGFyZXJfaWQYMiABKA0SNwoQYXJyYXlNZXRh",
            "SW5mb0JveBg8IAEoCzIdLkhFQUwuRm9zc2lsLkFycmF5TWV0YUluZm9Cb3gi",
            "RgoQQXJyYXlNZXRhSW5mb0JveBIMCgRyYW5rGAEgASgFEg8KB2xlbmd0aHMY",
            "AiADKAUSEwoLbG93ZXJCb3VuZHMYAyADKAUiogEKD0tleVZhbHVlUGFpckJv",
            "eBIPCgd0eXBlX2lkGAEgASgNEkgKD2tleV92YWx1ZV9wYWlycxgCIAMoCzIv",
            "LkhFQUwuRm9zc2lsLktleVZhbHVlUGFpckJveC5LZXlWYWx1ZVBhaXJzRW50",
            "cnkaNAoSS2V5VmFsdWVQYWlyc0VudHJ5EgsKA2tleRgBIAEoDRINCgV2YWx1",
            "ZRgCIAEoDToCOAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HEAL.Attic.Bundle), global::HEAL.Attic.Bundle.Parser, new[]{ "TransformerGuids", "TypeGuids", "RootBoxId", "Boxes", "Strings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HEAL.Attic.Box), global::HEAL.Attic.Box.Parser, new[]{ "TransformerId", "TypeBoxId", "TypeId", "GenericTypeBoxIds", "Bool", "Int", "Long", "UInt", "ULong", "Float", "Double", "Bytes", "Bools", "Ints", "Longs", "UInts", "ULongs", "Floats", "Doubles", "KeyValuePairs", "ComparerId", "ArrayMetaInfoBox" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HEAL.Attic.ArrayMetaInfoBox), global::HEAL.Attic.ArrayMetaInfoBox.Parser, new[]{ "Rank", "Lengths", "LowerBounds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HEAL.Attic.KeyValuePairBox), global::HEAL.Attic.KeyValuePairBox.Parser, new[]{ "TypeId", "KeyValuePairs" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Bundle : pb::IMessage<Bundle> {
    private static readonly pb::MessageParser<Bundle> _parser = new pb::MessageParser<Bundle>(() => new Bundle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bundle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HEAL.Attic.PersistenceMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bundle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bundle(Bundle other) : this() {
      transformerGuids_ = other.transformerGuids_.Clone();
      typeGuids_ = other.typeGuids_.Clone();
      rootBoxId_ = other.rootBoxId_;
      boxes_ = other.boxes_.Clone();
      strings_ = other.strings_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bundle Clone() {
      return new Bundle(this);
    }

    /// <summary>Field number for the "transformer_guids" field.</summary>
    public const int TransformerGuidsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_transformerGuids_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> transformerGuids_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> TransformerGuids {
      get { return transformerGuids_; }
    }

    /// <summary>Field number for the "type_guids" field.</summary>
    public const int TypeGuidsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_typeGuids_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> typeGuids_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> TypeGuids {
      get { return typeGuids_; }
    }

    /// <summary>Field number for the "root_box_id" field.</summary>
    public const int RootBoxIdFieldNumber = 10;
    private uint rootBoxId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RootBoxId {
      get { return rootBoxId_; }
      set {
        rootBoxId_ = value;
      }
    }

    /// <summary>Field number for the "boxes" field.</summary>
    public const int BoxesFieldNumber = 20;
    private static readonly pb::FieldCodec<global::HEAL.Attic.Box> _repeated_boxes_codec
        = pb::FieldCodec.ForMessage(162, global::HEAL.Attic.Box.Parser);
    private readonly pbc::RepeatedField<global::HEAL.Attic.Box> boxes_ = new pbc::RepeatedField<global::HEAL.Attic.Box>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HEAL.Attic.Box> Boxes {
      get { return boxes_; }
    }

    /// <summary>Field number for the "strings" field.</summary>
    public const int StringsFieldNumber = 30;
    private static readonly pb::FieldCodec<string> _repeated_strings_codec
        = pb::FieldCodec.ForString(242);
    private readonly pbc::RepeatedField<string> strings_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Strings {
      get { return strings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bundle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bundle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transformerGuids_.Equals(other.transformerGuids_)) return false;
      if(!typeGuids_.Equals(other.typeGuids_)) return false;
      if (RootBoxId != other.RootBoxId) return false;
      if(!boxes_.Equals(other.boxes_)) return false;
      if(!strings_.Equals(other.strings_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transformerGuids_.GetHashCode();
      hash ^= typeGuids_.GetHashCode();
      if (RootBoxId != 0) hash ^= RootBoxId.GetHashCode();
      hash ^= boxes_.GetHashCode();
      hash ^= strings_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transformerGuids_.WriteTo(output, _repeated_transformerGuids_codec);
      typeGuids_.WriteTo(output, _repeated_typeGuids_codec);
      if (RootBoxId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(RootBoxId);
      }
      boxes_.WriteTo(output, _repeated_boxes_codec);
      strings_.WriteTo(output, _repeated_strings_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transformerGuids_.CalculateSize(_repeated_transformerGuids_codec);
      size += typeGuids_.CalculateSize(_repeated_typeGuids_codec);
      if (RootBoxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RootBoxId);
      }
      size += boxes_.CalculateSize(_repeated_boxes_codec);
      size += strings_.CalculateSize(_repeated_strings_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bundle other) {
      if (other == null) {
        return;
      }
      transformerGuids_.Add(other.transformerGuids_);
      typeGuids_.Add(other.typeGuids_);
      if (other.RootBoxId != 0) {
        RootBoxId = other.RootBoxId;
      }
      boxes_.Add(other.boxes_);
      strings_.Add(other.strings_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            transformerGuids_.AddEntriesFrom(input, _repeated_transformerGuids_codec);
            break;
          }
          case 18: {
            typeGuids_.AddEntriesFrom(input, _repeated_typeGuids_codec);
            break;
          }
          case 80: {
            RootBoxId = input.ReadUInt32();
            break;
          }
          case 162: {
            boxes_.AddEntriesFrom(input, _repeated_boxes_codec);
            break;
          }
          case 242: {
            strings_.AddEntriesFrom(input, _repeated_strings_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Box : pb::IMessage<Box> {
    private static readonly pb::MessageParser<Box> _parser = new pb::MessageParser<Box>(() => new Box());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Box> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HEAL.Attic.PersistenceMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box(Box other) : this() {
      transformerId_ = other.transformerId_;
      typeBoxId_ = other.typeBoxId_;
      typeId_ = other.typeId_;
      genericTypeBoxIds_ = other.genericTypeBoxIds_.Clone();
      bool_ = other.bool_;
      int_ = other.int_;
      long_ = other.long_;
      uInt_ = other.uInt_;
      uLong_ = other.uLong_;
      float_ = other.float_;
      double_ = other.double_;
      bytes_ = other.bytes_;
      bools_ = other.bools_.Clone();
      ints_ = other.ints_.Clone();
      longs_ = other.longs_.Clone();
      uInts_ = other.uInts_.Clone();
      uLongs_ = other.uLongs_.Clone();
      floats_ = other.floats_.Clone();
      doubles_ = other.doubles_.Clone();
      keyValuePairs_ = other.keyValuePairs_.Clone();
      comparerId_ = other.comparerId_;
      ArrayMetaInfoBox = other.arrayMetaInfoBox_ != null ? other.ArrayMetaInfoBox.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box Clone() {
      return new Box(this);
    }

    /// <summary>Field number for the "transformer_id" field.</summary>
    public const int TransformerIdFieldNumber = 1;
    private uint transformerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TransformerId {
      get { return transformerId_; }
      set {
        transformerId_ = value;
      }
    }

    /// <summary>Field number for the "type_box_id" field.</summary>
    public const int TypeBoxIdFieldNumber = 2;
    private uint typeBoxId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TypeBoxId {
      get { return typeBoxId_; }
      set {
        typeBoxId_ = value;
      }
    }

    /// <summary>Field number for the "type_id" field.</summary>
    public const int TypeIdFieldNumber = 10;
    private uint typeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "generic_type_box_ids" field.</summary>
    public const int GenericTypeBoxIdsFieldNumber = 11;
    private static readonly pb::FieldCodec<uint> _repeated_genericTypeBoxIds_codec
        = pb::FieldCodec.ForUInt32(90);
    private readonly pbc::RepeatedField<uint> genericTypeBoxIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> GenericTypeBoxIds {
      get { return genericTypeBoxIds_; }
    }

    /// <summary>Field number for the "bool" field.</summary>
    public const int BoolFieldNumber = 20;
    private bool bool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool {
      get { return bool_; }
      set {
        bool_ = value;
      }
    }

    /// <summary>Field number for the "int" field.</summary>
    public const int IntFieldNumber = 21;
    private int int_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int {
      get { return int_; }
      set {
        int_ = value;
      }
    }

    /// <summary>Field number for the "long" field.</summary>
    public const int LongFieldNumber = 22;
    private long long_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Long {
      get { return long_; }
      set {
        long_ = value;
      }
    }

    /// <summary>Field number for the "u_int" field.</summary>
    public const int UIntFieldNumber = 23;
    private uint uInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UInt {
      get { return uInt_; }
      set {
        uInt_ = value;
      }
    }

    /// <summary>Field number for the "u_long" field.</summary>
    public const int ULongFieldNumber = 24;
    private ulong uLong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ULong {
      get { return uLong_; }
      set {
        uLong_ = value;
      }
    }

    /// <summary>Field number for the "float" field.</summary>
    public const int FloatFieldNumber = 25;
    private float float_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Float {
      get { return float_; }
      set {
        float_ = value;
      }
    }

    /// <summary>Field number for the "double" field.</summary>
    public const int DoubleFieldNumber = 26;
    private double double_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Double {
      get { return double_; }
      set {
        double_ = value;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 27;
    private pb::ByteString bytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return bytes_; }
      set {
        bytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bools" field.</summary>
    public const int BoolsFieldNumber = 30;
    private static readonly pb::FieldCodec<bool> _repeated_bools_codec
        = pb::FieldCodec.ForBool(242);
    private readonly pbc::RepeatedField<bool> bools_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Bools {
      get { return bools_; }
    }

    /// <summary>Field number for the "ints" field.</summary>
    public const int IntsFieldNumber = 31;
    private static readonly pb::FieldCodec<int> _repeated_ints_codec
        = pb::FieldCodec.ForInt32(250);
    private readonly pbc::RepeatedField<int> ints_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ints {
      get { return ints_; }
    }

    /// <summary>Field number for the "longs" field.</summary>
    public const int LongsFieldNumber = 32;
    private static readonly pb::FieldCodec<long> _repeated_longs_codec
        = pb::FieldCodec.ForInt64(258);
    private readonly pbc::RepeatedField<long> longs_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Longs {
      get { return longs_; }
    }

    /// <summary>Field number for the "u_ints" field.</summary>
    public const int UIntsFieldNumber = 33;
    private static readonly pb::FieldCodec<uint> _repeated_uInts_codec
        = pb::FieldCodec.ForUInt32(266);
    private readonly pbc::RepeatedField<uint> uInts_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UInts {
      get { return uInts_; }
    }

    /// <summary>Field number for the "u_longs" field.</summary>
    public const int ULongsFieldNumber = 34;
    private static readonly pb::FieldCodec<ulong> _repeated_uLongs_codec
        = pb::FieldCodec.ForUInt64(274);
    private readonly pbc::RepeatedField<ulong> uLongs_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ULongs {
      get { return uLongs_; }
    }

    /// <summary>Field number for the "floats" field.</summary>
    public const int FloatsFieldNumber = 35;
    private static readonly pb::FieldCodec<float> _repeated_floats_codec
        = pb::FieldCodec.ForFloat(282);
    private readonly pbc::RepeatedField<float> floats_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Floats {
      get { return floats_; }
    }

    /// <summary>Field number for the "doubles" field.</summary>
    public const int DoublesFieldNumber = 36;
    private static readonly pb::FieldCodec<double> _repeated_doubles_codec
        = pb::FieldCodec.ForDouble(290);
    private readonly pbc::RepeatedField<double> doubles_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Doubles {
      get { return doubles_; }
    }

    /// <summary>Field number for the "key_value_pairs" field.</summary>
    public const int KeyValuePairsFieldNumber = 40;
    private static readonly pb::FieldCodec<global::HEAL.Attic.KeyValuePairBox> _repeated_keyValuePairs_codec
        = pb::FieldCodec.ForMessage(322, global::HEAL.Attic.KeyValuePairBox.Parser);
    private readonly pbc::RepeatedField<global::HEAL.Attic.KeyValuePairBox> keyValuePairs_ = new pbc::RepeatedField<global::HEAL.Attic.KeyValuePairBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HEAL.Attic.KeyValuePairBox> KeyValuePairs {
      get { return keyValuePairs_; }
    }

    /// <summary>Field number for the "comparer_id" field.</summary>
    public const int ComparerIdFieldNumber = 50;
    private uint comparerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ComparerId {
      get { return comparerId_; }
      set {
        comparerId_ = value;
      }
    }

    /// <summary>Field number for the "arrayMetaInfoBox" field.</summary>
    public const int ArrayMetaInfoBoxFieldNumber = 60;
    private global::HEAL.Attic.ArrayMetaInfoBox arrayMetaInfoBox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HEAL.Attic.ArrayMetaInfoBox ArrayMetaInfoBox {
      get { return arrayMetaInfoBox_; }
      set {
        arrayMetaInfoBox_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Box);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Box other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransformerId != other.TransformerId) return false;
      if (TypeBoxId != other.TypeBoxId) return false;
      if (TypeId != other.TypeId) return false;
      if(!genericTypeBoxIds_.Equals(other.genericTypeBoxIds_)) return false;
      if (Bool != other.Bool) return false;
      if (Int != other.Int) return false;
      if (Long != other.Long) return false;
      if (UInt != other.UInt) return false;
      if (ULong != other.ULong) return false;
      if (Float != other.Float) return false;
      if (Double != other.Double) return false;
      if (Bytes != other.Bytes) return false;
      if(!bools_.Equals(other.bools_)) return false;
      if(!ints_.Equals(other.ints_)) return false;
      if(!longs_.Equals(other.longs_)) return false;
      if(!uInts_.Equals(other.uInts_)) return false;
      if(!uLongs_.Equals(other.uLongs_)) return false;
      if(!floats_.Equals(other.floats_)) return false;
      if(!doubles_.Equals(other.doubles_)) return false;
      if(!keyValuePairs_.Equals(other.keyValuePairs_)) return false;
      if (ComparerId != other.ComparerId) return false;
      if (!object.Equals(ArrayMetaInfoBox, other.ArrayMetaInfoBox)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransformerId != 0) hash ^= TransformerId.GetHashCode();
      if (TypeBoxId != 0) hash ^= TypeBoxId.GetHashCode();
      if (TypeId != 0) hash ^= TypeId.GetHashCode();
      hash ^= genericTypeBoxIds_.GetHashCode();
      if (Bool != false) hash ^= Bool.GetHashCode();
      if (Int != 0) hash ^= Int.GetHashCode();
      if (Long != 0L) hash ^= Long.GetHashCode();
      if (UInt != 0) hash ^= UInt.GetHashCode();
      if (ULong != 0UL) hash ^= ULong.GetHashCode();
      if (Float != 0F) hash ^= Float.GetHashCode();
      if (Double != 0D) hash ^= Double.GetHashCode();
      if (Bytes.Length != 0) hash ^= Bytes.GetHashCode();
      hash ^= bools_.GetHashCode();
      hash ^= ints_.GetHashCode();
      hash ^= longs_.GetHashCode();
      hash ^= uInts_.GetHashCode();
      hash ^= uLongs_.GetHashCode();
      hash ^= floats_.GetHashCode();
      hash ^= doubles_.GetHashCode();
      hash ^= keyValuePairs_.GetHashCode();
      if (ComparerId != 0) hash ^= ComparerId.GetHashCode();
      if (arrayMetaInfoBox_ != null) hash ^= ArrayMetaInfoBox.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransformerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TransformerId);
      }
      if (TypeBoxId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TypeBoxId);
      }
      if (TypeId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(TypeId);
      }
      genericTypeBoxIds_.WriteTo(output, _repeated_genericTypeBoxIds_codec);
      if (Bool != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Bool);
      }
      if (Int != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Int);
      }
      if (Long != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(Long);
      }
      if (UInt != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(UInt);
      }
      if (ULong != 0UL) {
        output.WriteRawTag(192, 1);
        output.WriteUInt64(ULong);
      }
      if (Float != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(Float);
      }
      if (Double != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(Double);
      }
      if (Bytes.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteBytes(Bytes);
      }
      bools_.WriteTo(output, _repeated_bools_codec);
      ints_.WriteTo(output, _repeated_ints_codec);
      longs_.WriteTo(output, _repeated_longs_codec);
      uInts_.WriteTo(output, _repeated_uInts_codec);
      uLongs_.WriteTo(output, _repeated_uLongs_codec);
      floats_.WriteTo(output, _repeated_floats_codec);
      doubles_.WriteTo(output, _repeated_doubles_codec);
      keyValuePairs_.WriteTo(output, _repeated_keyValuePairs_codec);
      if (ComparerId != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(ComparerId);
      }
      if (arrayMetaInfoBox_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(ArrayMetaInfoBox);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransformerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TransformerId);
      }
      if (TypeBoxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TypeBoxId);
      }
      if (TypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TypeId);
      }
      size += genericTypeBoxIds_.CalculateSize(_repeated_genericTypeBoxIds_codec);
      if (Bool != false) {
        size += 2 + 1;
      }
      if (Int != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Int);
      }
      if (Long != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Long);
      }
      if (UInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UInt);
      }
      if (ULong != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ULong);
      }
      if (Float != 0F) {
        size += 2 + 4;
      }
      if (Double != 0D) {
        size += 2 + 8;
      }
      if (Bytes.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      size += bools_.CalculateSize(_repeated_bools_codec);
      size += ints_.CalculateSize(_repeated_ints_codec);
      size += longs_.CalculateSize(_repeated_longs_codec);
      size += uInts_.CalculateSize(_repeated_uInts_codec);
      size += uLongs_.CalculateSize(_repeated_uLongs_codec);
      size += floats_.CalculateSize(_repeated_floats_codec);
      size += doubles_.CalculateSize(_repeated_doubles_codec);
      size += keyValuePairs_.CalculateSize(_repeated_keyValuePairs_codec);
      if (ComparerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ComparerId);
      }
      if (arrayMetaInfoBox_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ArrayMetaInfoBox);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Box other) {
      if (other == null) {
        return;
      }
      if (other.TransformerId != 0) {
        TransformerId = other.TransformerId;
      }
      if (other.TypeBoxId != 0) {
        TypeBoxId = other.TypeBoxId;
      }
      if (other.TypeId != 0) {
        TypeId = other.TypeId;
      }
      genericTypeBoxIds_.Add(other.genericTypeBoxIds_);
      if (other.Bool != false) {
        Bool = other.Bool;
      }
      if (other.Int != 0) {
        Int = other.Int;
      }
      if (other.Long != 0L) {
        Long = other.Long;
      }
      if (other.UInt != 0) {
        UInt = other.UInt;
      }
      if (other.ULong != 0UL) {
        ULong = other.ULong;
      }
      if (other.Float != 0F) {
        Float = other.Float;
      }
      if (other.Double != 0D) {
        Double = other.Double;
      }
      if (other.Bytes.Length != 0) {
        Bytes = other.Bytes;
      }
      bools_.Add(other.bools_);
      ints_.Add(other.ints_);
      longs_.Add(other.longs_);
      uInts_.Add(other.uInts_);
      uLongs_.Add(other.uLongs_);
      floats_.Add(other.floats_);
      doubles_.Add(other.doubles_);
      keyValuePairs_.Add(other.keyValuePairs_);
      if (other.ComparerId != 0) {
        ComparerId = other.ComparerId;
      }
      if (other.arrayMetaInfoBox_ != null) {
        if (arrayMetaInfoBox_ == null) {
          arrayMetaInfoBox_ = new global::HEAL.Attic.ArrayMetaInfoBox();
        }
        ArrayMetaInfoBox.MergeFrom(other.ArrayMetaInfoBox);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TransformerId = input.ReadUInt32();
            break;
          }
          case 16: {
            TypeBoxId = input.ReadUInt32();
            break;
          }
          case 80: {
            TypeId = input.ReadUInt32();
            break;
          }
          case 90:
          case 88: {
            genericTypeBoxIds_.AddEntriesFrom(input, _repeated_genericTypeBoxIds_codec);
            break;
          }
          case 160: {
            Bool = input.ReadBool();
            break;
          }
          case 168: {
            Int = input.ReadInt32();
            break;
          }
          case 176: {
            Long = input.ReadInt64();
            break;
          }
          case 184: {
            UInt = input.ReadUInt32();
            break;
          }
          case 192: {
            ULong = input.ReadUInt64();
            break;
          }
          case 205: {
            Float = input.ReadFloat();
            break;
          }
          case 209: {
            Double = input.ReadDouble();
            break;
          }
          case 218: {
            Bytes = input.ReadBytes();
            break;
          }
          case 242:
          case 240: {
            bools_.AddEntriesFrom(input, _repeated_bools_codec);
            break;
          }
          case 250:
          case 248: {
            ints_.AddEntriesFrom(input, _repeated_ints_codec);
            break;
          }
          case 258:
          case 256: {
            longs_.AddEntriesFrom(input, _repeated_longs_codec);
            break;
          }
          case 266:
          case 264: {
            uInts_.AddEntriesFrom(input, _repeated_uInts_codec);
            break;
          }
          case 274:
          case 272: {
            uLongs_.AddEntriesFrom(input, _repeated_uLongs_codec);
            break;
          }
          case 282:
          case 285: {
            floats_.AddEntriesFrom(input, _repeated_floats_codec);
            break;
          }
          case 290:
          case 289: {
            doubles_.AddEntriesFrom(input, _repeated_doubles_codec);
            break;
          }
          case 322: {
            keyValuePairs_.AddEntriesFrom(input, _repeated_keyValuePairs_codec);
            break;
          }
          case 400: {
            ComparerId = input.ReadUInt32();
            break;
          }
          case 482: {
            if (arrayMetaInfoBox_ == null) {
              arrayMetaInfoBox_ = new global::HEAL.Attic.ArrayMetaInfoBox();
            }
            input.ReadMessage(arrayMetaInfoBox_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArrayMetaInfoBox : pb::IMessage<ArrayMetaInfoBox> {
    private static readonly pb::MessageParser<ArrayMetaInfoBox> _parser = new pb::MessageParser<ArrayMetaInfoBox>(() => new ArrayMetaInfoBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArrayMetaInfoBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HEAL.Attic.PersistenceMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrayMetaInfoBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrayMetaInfoBox(ArrayMetaInfoBox other) : this() {
      rank_ = other.rank_;
      lengths_ = other.lengths_.Clone();
      lowerBounds_ = other.lowerBounds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrayMetaInfoBox Clone() {
      return new ArrayMetaInfoBox(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "lengths" field.</summary>
    public const int LengthsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_lengths_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> lengths_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Lengths {
      get { return lengths_; }
    }

    /// <summary>Field number for the "lowerBounds" field.</summary>
    public const int LowerBoundsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_lowerBounds_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> lowerBounds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LowerBounds {
      get { return lowerBounds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArrayMetaInfoBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArrayMetaInfoBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if(!lengths_.Equals(other.lengths_)) return false;
      if(!lowerBounds_.Equals(other.lowerBounds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != 0) hash ^= Rank.GetHashCode();
      hash ^= lengths_.GetHashCode();
      hash ^= lowerBounds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      lengths_.WriteTo(output, _repeated_lengths_codec);
      lowerBounds_.WriteTo(output, _repeated_lowerBounds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      size += lengths_.CalculateSize(_repeated_lengths_codec);
      size += lowerBounds_.CalculateSize(_repeated_lowerBounds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArrayMetaInfoBox other) {
      if (other == null) {
        return;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      lengths_.Add(other.lengths_);
      lowerBounds_.Add(other.lowerBounds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            lengths_.AddEntriesFrom(input, _repeated_lengths_codec);
            break;
          }
          case 26:
          case 24: {
            lowerBounds_.AddEntriesFrom(input, _repeated_lowerBounds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyValuePairBox : pb::IMessage<KeyValuePairBox> {
    private static readonly pb::MessageParser<KeyValuePairBox> _parser = new pb::MessageParser<KeyValuePairBox>(() => new KeyValuePairBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyValuePairBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HEAL.Attic.PersistenceMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePairBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePairBox(KeyValuePairBox other) : this() {
      typeId_ = other.typeId_;
      keyValuePairs_ = other.keyValuePairs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePairBox Clone() {
      return new KeyValuePairBox(this);
    }

    /// <summary>Field number for the "type_id" field.</summary>
    public const int TypeIdFieldNumber = 1;
    private uint typeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "key_value_pairs" field.</summary>
    public const int KeyValuePairsFieldNumber = 2;
    private static readonly pbc::MapField<uint, uint>.Codec _map_keyValuePairs_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 18);
    private readonly pbc::MapField<uint, uint> keyValuePairs_ = new pbc::MapField<uint, uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> KeyValuePairs {
      get { return keyValuePairs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyValuePairBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyValuePairBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeId != other.TypeId) return false;
      if (!KeyValuePairs.Equals(other.KeyValuePairs)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeId != 0) hash ^= TypeId.GetHashCode();
      hash ^= KeyValuePairs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TypeId);
      }
      keyValuePairs_.WriteTo(output, _map_keyValuePairs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TypeId);
      }
      size += keyValuePairs_.CalculateSize(_map_keyValuePairs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyValuePairBox other) {
      if (other == null) {
        return;
      }
      if (other.TypeId != 0) {
        TypeId = other.TypeId;
      }
      keyValuePairs_.Add(other.keyValuePairs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TypeId = input.ReadUInt32();
            break;
          }
          case 18: {
            keyValuePairs_.AddEntriesFrom(input, _map_keyValuePairs_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
